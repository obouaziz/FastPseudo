% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mleIC.R
\name{mle.ic}
\alias{mle.ic}
\title{Computation of the maximum likelihood estimator in the PCH model for interval-censored data}
\usage{
mle.ic(
  Left,
  Right,
  cuts = NULL,
  a,
  maxiter = 1000,
  tol = 1e-05,
  verbose = FALSE
)
}
\arguments{
\item{Left}{the time sequence for the left-time endpoint. Must be non-negative}

\item{Right}{the time sequence for right-time endpoint. The value \code{Inf} for right-censored data is allowed.}

\item{cuts}{the sequence of cuts in the pch model. Default is \code{NULL} which corresponds to the exponential model.}

\item{a}{the initial value of the log-hazard function between each cut. Should be of length equal to \code{length(cuts)+1}.}

\item{maxiter}{the total number of iterations in the EM algorithm. Default is 1000.}

\item{tol}{the tolerance value in the EM algorithm. The algorithm stops when the relative error
between new and previous log-hazard estimate value is less than \code{tol}. Default is 1e-5.}

\item{verbose}{if \code{TRUE}, at each iteration step the current value of the estimator is displayed along with the relative error
between new and previous log-hazard estimate value.}
}
\value{
return the MLE
}
\description{
Given a sequence of time, a set of cuts and initial log-hazard values, compute
the maximum likelihood estimator (MLE) of the hazard function from a piecewise-constant hazard model.
The estimator is based on the EM algorithm.
}
\examples{
n=4000
cuts=c(20,40,50,70)
alpha=c(0,0.05,0.1,0.2,0.4)/10
TrueTime=rsurv(n,cuts,alpha) #generate true data from the pch model
##Simulation of interval-censored data
Right<-rep(Inf,n)
nb.visit=20
visTime=0;visit=matrix(0,n,nb.visit+1)
visit=cbind(visit,rep(Inf,n))
visit[,2]=visit[,1]+stats::runif(n,0,10)#runif(n,0,5)
schedule=4
for (i in 3:(nb.visit+1))
{
  visit[,i]=visit[,i-1]+stats::runif(n,0,schedule*2)
}
Left<-visit[,(nb.visit+1)]
J=sapply(1:(n),function(i)cut(TrueTime[i],breaks=c(visit[1:(n),][i,]),
labels=1:(nb.visit+1),right=FALSE)) #sum(is.na(J)) check!
Left[1:(n)]=sapply(1:(n),function(i)visit[1:(n),][i,J[i]])
Right[1:(n)]=sapply(1:(n),function(i)visit[1:(n),][i,as.numeric(J[i])+1])
#View(data.frame(Left,Right,TrueTime)) #To see the generated data
sum(Right[1:(n)]==Inf)/n #percentage of right-censored data
result=mle.ic(Left,Right,cuts=cuts,a=rep(log(0.5),length(cuts)+1),
maxiter=1000,tol=1e-12,verbose=TRUE)
result$lambda #the estimation
alpha #true value
plot(result)
lines(c(0,cuts,100),c(alpha,alpha[5]),type="s",col="red") #true hazard
seqtime=seq(0,200,length.out=1000)
plot(result,xlim=c(0,200),surv=TRUE)
lines(seqtime,exp(-pchcumhaz(seqtime,cuts,alpha)),type="l",col="red") #true survival function
resultbis=mle.ic(Left,Right,cuts=NULL,a=rep(log(0.5),length(cuts)+1),
maxiter=1000,tol=1e-12,verbose=TRUE)
lines(resultbis,xlim=c(0,200),col="blue",surv=TRUE)
}
